packages:
  - include/common.yaml

substitutions:
  device: m8
  slave: '153'
  grace_period: 5s
  motor_type: a
esphome:
  name: m8
  platform: ESP32
  board: wemos_d1_mini32
  includes:
  - include/modbus_motor.h
  arduino_version: platformio/espressif32@3.2.0
  build_path: m8
  platformio_options: {}
  libraries: []
  name_add_mac_suffix: false
api:
  services:
  - service: queue_reset
    then:
    - lambda: !lambda |-
        modbus_hub->queue_clear();
    variables: {}
  port: 6053
  password: ''
  reboot_timeout: 15min
sensor:
- platform: homeassistant
  entity_id: input_number.m8_freq
  id: admin_freq
  internal: true
  on_value:
  - then:
    - lambda: !lambda |-
        queue_write_cmd(id(modbus_hub), 0x2001, x * 100);
        id(m8_freq).update();
  force_update: false
  accuracy_decimals: 1
  name: admin_freq
- platform: homeassistant
  entity_id: input_number.m8_on_duration
  id: on_duration
  force_update: false
  accuracy_decimals: 1
  name: on_duration
  internal: true
- platform: homeassistant
  entity_id: input_number.m8_off_duration
  id: off_duration
  force_update: false
  accuracy_decimals: 1
  name: off_duration
  internal: true
- platform: modbus_controller
  id: motor_status
  name: Motor Status
  address: 8448
  offset: 2
  modbus_functioncode: read_holding_registers
  value_type: U_WORD
  internal: false
  on_value:
  - then:
    - component.update:
        id: m8_state
  force_update: false
  bitmask: 0xFFFFFFFF
  register_count: 1
  skip_updates: 0
- platform: modbus_controller
  id: m8_freq
  name: m8 frequency
  address: 8448
  offset: 4
  unit_of_measurement: Hz
  modbus_functioncode: read_holding_registers
  value_type: U_WORD
  accuracy_decimals: 0
  filters:
  - multiply: 0.01
  force_update: false
  bitmask: 0xFFFFFFFF
  register_count: 1
  skip_updates: 0
- platform: modbus_controller
  id: m8_current
  name: m8 current
  address: 8448
  offset: 8
  unit_of_measurement: A
  modbus_functioncode: read_holding_registers
  value_type: U_WORD
  accuracy_decimals: 1
  filters:
  - multiply: 0.1
  force_update: false
  bitmask: 0xFFFFFFFF
  register_count: 1
  skip_updates: 0
text_sensor:
- platform: template
  id: m8_state
  name: m8 State
  lambda: !lambda |-
    return motor_status_str(id(motor_status).state);
  update_interval: 60s
- platform: version
  name: m8 ESPHomelib Version
  id: version_esphomelib
  icon: mdi:new-box
  hide_timestamp: false
- platform: wifi_info
  ip_address:
    name: m8 IP Address
  ssid:
    name: m8 Connected SSID
  bssid:
    name: m8 Connected BSSID
switch:
- platform: template
  name: m8 STOP
  id: stop
  lambda: !lambda |-
    return motor_status_code(id(motor_status).state) == MOTOR_STATUS_STOPPED;
  turn_on_action:
    then:
    - lambda: !lambda |-
        queue_write_cmd(id(modbus_hub), 0x2000, 0x1);
        id(motor_status).update();
  optimistic: false
  assumed_state: false
  restore_state: false
- platform: template
  name: m8 FORWARD
  id: forward
  lambda: !lambda |-
    return motor_status_code(id(motor_status).state) == MOTOR_STATUS_FORWARD;
  turn_on_action:
    then:
    - lambda: !lambda |-
        queue_write_cmd(id(modbus_hub), 0x2000, 0x12);
        id(motor_status).update();
  optimistic: false
  assumed_state: false
  restore_state: false
- platform: template
  name: m8 BACKWARD
  id: backward
  lambda: !lambda |-
    return motor_status_code(id(motor_status).state) == MOTOR_STATUS_BACKWARD;
  turn_on_action:
    then:
    - lambda: !lambda |-
        queue_write_cmd(id(modbus_hub), 0x2000, 0x22);
        id(motor_status).update();
  optimistic: false
  assumed_state: false
  restore_state: false
- platform: template
  name: m8 FORWARD interval
  optimistic: true
  turn_on_action:
    then:
    - while:
        condition:
          lambda: !lambda |-
            return true;
        then:
        - lambda: !lambda |-
            ESP_LOGW("INTERVAL", "FORWARD - dur %f", id(on_duration).state);
            queue_write_cmd(id(modbus_hub), 0x2000, 0x12);
        - delay: !lambda |-
            return (id(on_duration).state ?: 2) * 1000;
        - lambda: !lambda |-
            ESP_LOGW("INTERVAL", "STOP - dur %f", id(off_duration).state);
            queue_write_cmd(id(modbus_hub), 0x2000, 0x1);
        - delay: !lambda |-
            return (id(off_duration).state ?: 2) * 1000;
  turn_off_action:
    then:
    - lambda: !lambda |-
        ESP_LOGW("INTERVAL", "STOP");
        queue_write_cmd(id(modbus_hub), 0x2000, 0x1);
  assumed_state: false
  restore_state: false
- platform: template
  name: m8 BACKWARD interval
  optimistic: true
  turn_on_action:
    then:
    - while:
        condition:
          lambda: !lambda |-
            return true;
        then:
        - lambda: !lambda |-
            ESP_LOGW("INTERVAL", "BACKWARD - dur %f", id(on_duration).state);
            queue_write_cmd(id(modbus_hub), 0x2000, 0x22);
        - delay: !lambda |-
            return (id(on_duration).state ?: 2) * 1000;
        - lambda: !lambda |-
            ESP_LOGW("INTERVAL", "STOP - dur %f", id(off_duration).state);
            queue_write_cmd(id(modbus_hub), 0x2000, 0x1);
        - delay: !lambda |-
            return (id(off_duration).state ?: 2) * 1000;
  turn_off_action:
    then:
    - lambda: !lambda |-
        ESP_LOGW("INTERVAL", "STOP");
        queue_write_cmd(id(modbus_hub), 0x2000, 0x1);
  assumed_state: false
  restore_state: false
modbus_controller:
  id: modbus_hub
  uart_id: mod_bus
  command_throttle: 100ms
  address: 0x99
  update_interval: 1s
  grace_period: 5s
  ctrl_pin: 19
  stats:
  - type: TIMEOUTS
    name: m8 timeouts
    force_update: false
logger:
  level: DEBUG
  baud_rate: 115200
  tx_buffer_size: 512
  hardware_uart: UART0
  logs: {}
web_server:
  port: 80
  css_url: https://esphome.io/_static/webserver-v1.min.css
  js_url: https://esphome.io/_static/webserver-v1.min.js
status_led:
  pin:
    number: 2
    mode: OUTPUT
    inverted: false
uart:
- id: mod_bus
  rx_pin: 32
  tx_pin: 33
  baud_rate: 9600
  stop_bits: 1
  rx_buffer_size: 256
  invert: false
  data_bits: 8
  parity: NONE
wifi:
  networks:
  - ssid: !secret 'tkv_ssid'
    password: !secret 'tkv_password'
    priority: 10.0
  - ssid: !secret 'other_ssid'
    password: !secret 'other_password'
    priority: 5.0
  ap:
    ssid: m8 Hotspot
    password: !secret 'ap_password'
    ap_timeout: 1min
  enable_mdns: true
  domain: .local
  reboot_timeout: 15min
  power_save_mode: LIGHT
  fast_connect: false
  use_address: m8.local
captive_portal: {}
ota:
  safe_mode: true
  port: 3232
  password: ''
  reboot_timeout: 5min
  num_attempts: 10
binary_sensor: []

