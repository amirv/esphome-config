packages:
  - include/common.yaml

api:
  services:
  - service: queue_reset
    then:
    - lambda: modbus_hub->queue_clear();
captive_portal: null
esphome:
  board: wemos_d1_mini32
  includes:
  - include/modbus_motor.h
  name: ${device}
  platform: ESP32
modbus_controller:
  address: ${slave}
  command_throttle: 100ms
  ctrl_pin: GPIO19
  grace_period: ${grace_period}
  id: modbus_hub
  stats:
  - name: ${device} timeouts
    type: timeouts
  uart_id: mod_bus
  update_interval: 1s
ota: null
sensor:
- entity_id: input_number.${device}_freq
  id: admin_freq
  internal: true
  on_value:
    then:
    - lambda: 'queue_write_cmd(id(modbus_hub), 0x2001, x * 100);

        id(${device}_freq).update();'
  platform: homeassistant
- entity_id: input_number.${device}_on_duration
  id: on_duration
  platform: homeassistant
- entity_id: input_number.${device}_off_duration
  id: off_duration
  platform: homeassistant
- address: 8448
  id: motor_status
  internal: false
  modbus_functioncode: read_holding_registers
  name: Motor Status
  offset: 2
  on_value:
    then:
    - component.update: ${device}_state
  platform: modbus_controller
  value_type: U_WORD
- accuracy_decimals: 0
  address: 8448
  filters:
  - multiply: 0.01
  id: ${device}_freq
  modbus_functioncode: read_holding_registers
  name: ${device} frequency
  offset: 4
  platform: modbus_controller
  unit_of_measurement: Hz
  value_type: U_WORD
- accuracy_decimals: 1
  address: 8448
  filters:
  - multiply: 0.1
  id: ${device}_current
  modbus_functioncode: read_holding_registers
  name: ${device} current
  offset: 8
  platform: modbus_controller
  unit_of_measurement: A
  value_type: U_WORD
- name: ${device} Wifi Signal
  platform: wifi_signal
  update_interval: 60s
- name: ${device} Uptime
  platform: uptime
substitutions:
  device: m8
  grace_period: 5s
  motor_type: a
  slave: '153'
switch:
- id: stop
  lambda: return motor_status_code(id(motor_status).state) == MOTOR_STATUS_STOPPED;
  name: ${device} STOP
  platform: template
  turn_on_action:
    lambda: 'queue_write_cmd(id(modbus_hub), 0x2000, 0x1);

      id(motor_status).update();'
- id: forward
  lambda: return motor_status_code(id(motor_status).state) == MOTOR_STATUS_FORWARD;
  name: ${device} FORWARD
  platform: template
  turn_on_action:
    lambda: 'queue_write_cmd(id(modbus_hub), 0x2000, 0x12);

      id(motor_status).update();'
- id: backward
  lambda: return motor_status_code(id(motor_status).state) == MOTOR_STATUS_BACKWARD;
  name: ${device} BACKWARD
  platform: template
  turn_on_action:
    lambda: 'queue_write_cmd(id(modbus_hub), 0x2000, 0x22);

      id(motor_status).update();'
- name: ${device} FORWARD interval
  optimistic: true
  platform: template
  turn_off_action:
  - lambda: 'ESP_LOGW("INTERVAL", "STOP");

      queue_write_cmd(id(modbus_hub), 0x2000, 0x1);'
  turn_on_action:
  - while:
      condition:
        lambda: return true;
      then:
      - lambda: 'ESP_LOGW("INTERVAL", "FORWARD - dur %f", id(on_duration).state);

          queue_write_cmd(id(modbus_hub), 0x2000, 0x12);'
      - delay: !lambda "return (id(on_duration).state ?: 2) * 1000;"
      - lambda: 'ESP_LOGW("INTERVAL", "STOP - dur %f", id(off_duration).state);

          queue_write_cmd(id(modbus_hub), 0x2000, 0x1);'
      - delay: !lambda "return (id(off_duration).state ?: 2) * 1000;"
- name: ${device} BACKWARD interval
  optimistic: true
  platform: template
  turn_off_action:
  - lambda: 'ESP_LOGW("INTERVAL", "STOP");

      queue_write_cmd(id(modbus_hub), 0x2000, 0x1);'
  turn_on_action:
  - while:
      condition:
        lambda: return true;
      then:
      - lambda: 'ESP_LOGW("INTERVAL", "BACKWARD - dur %f", id(on_duration).state);

          queue_write_cmd(id(modbus_hub), 0x2000, 0x22);'
      - delay: !lambda "return (id(on_duration).state ?: 2) * 1000;"
      - lambda: 'ESP_LOGW("INTERVAL", "STOP - dur %f", id(off_duration).state);

          queue_write_cmd(id(modbus_hub), 0x2000, 0x1);'
      - delay: !lambda "return (id(off_duration).state ?: 2) * 1000;"
- name: ${device} Restart
  platform: restart
text_sensor:
- id: ${device}_state
  lambda: return motor_status_str(id(motor_status).state);
  name: ${device} State
  platform: template
- id: version_esphomelib
  name: ${device} ESPHomelib Version
  platform: version
- bssid:
    name: ${device} Connected BSSID
  ip_address:
    name: ${device} IP Address
  platform: wifi_info
  ssid:
    name: ${device} Connected SSID
uart:
  baud_rate: 9600
  id: mod_bus
  rx_pin: GPIO32
  stop_bits: 1
  tx_pin: GPIO33
web_server:
  port: 80
wifi:
  ap:
    password: !secret 'ap_password'
    ssid: ${device} Hotspot
  networks:
  - password: !secret 'tkv_password'
    priority: 10
    ssid: !secret 'tkv_ssid'
  - password: !secret 'other_password'
    priority: 5
    ssid: !secret 'other_ssid'

